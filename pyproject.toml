[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["litadel", "cli", "api"]

[project]
name = "litadel"
version = "0.1.0"
description = "Multi-Agents LLM Financial Trading Framework (successor of TradingAgents by TaurusResearch)"
readme = "README.md"
authors = [
    {name = "Marvin Gabler", email = "marvin@deepweather.ai"}
]
maintainers = [
    {name = "Marvin Gabler", email = "marvin@deepweather.ai"}
]
license = {text = "Apache-2.0"}
requires-python = ">=3.10"
keywords = ["trading", "ai", "multi-agent", "llm", "finance", "algorithmic-trading"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
]

dependencies = [
    "akshare>=1.16.98",
    "backtrader>=1.9.78.123",
    "chainlit>=2.5.5",
    "chromadb>=1.0.12",
    "eodhd>=1.0.32",
    "feedparser>=6.0.11",
    "finnhub-python>=2.4.23",
    "grip>=4.6.2",
    "langchain-anthropic>=0.3.15",
    "langchain-experimental>=0.3.4",
    "langchain-google-genai>=2.1.5",
    "langchain-openai>=0.3.23",
    "langgraph>=0.4.8",
    "pandas>=2.3.0",
    "parsel>=1.10.0",
    "praw>=7.8.1",
    "pytz>=2025.2",
    "questionary>=2.1.0",
    "redis>=6.2.0",
    "requests>=2.32.4",
    "rich>=14.0.0",
    "setuptools>=80.9.0",
    "stockstats>=0.6.5",
    "tqdm>=4.67.1",
    "tushare>=1.4.21",
    "typing-extensions>=4.14.0",
    "yfinance>=0.2.63",
]

[project.urls]
Homepage = "https://github.com/deepweather/Litadel"
Documentation = "https://github.com/deepweather/Litadel/blob/main/README.md"
Repository = "https://github.com/deepweather/Litadel"
Issues = "https://github.com/deepweather/Litadel/issues"

[project.scripts]
litadel-cli = "cli.main:app"
litadel-api = "api.main:run_api"
litadel-admin = "api.cli_admin:app"

[project.optional-dependencies]
dev = [
    "ruff>=0.8.0",
    "onnxruntime==1.22.0",  # Pin to version with macOS ARM wheels
]

[tool.ruff]
# Ruff configuration for linting and formatting
line-length = 120
target-version = "py310"

# Exclude directories from linting
exclude = [
    ".git",
    ".venv",
    "env",
    "__pycache__",
    "*.egg-info",
    "build",
    "dist",
    "results",
    "eval_results",
    "eval_data",
    "node_modules",
    "frontend/dist",
]

[tool.ruff.lint]
# Enable pycodestyle (E, W), pyflakes (F), isort (I), and other useful rules
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort (import sorting)
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "EM",     # flake8-errmsg
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "PIE",    # flake8-pie
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "TCH",    # flake8-type-checking
    "ARG",    # flake8-unused-arguments
    "PL",     # pylint
    "TRY",    # tryceratops
    "RUF",    # ruff-specific rules
]

# Ignore specific rules that might be too strict for this project
ignore = [
    "E501",    # line too long (handled by formatter)
    "ISC001",  # implicit string concatenation (conflicts with formatter)
    "B008",    # do not perform function calls in argument defaults (common in FastAPI)
    "B904",    # raise without from inside except
    "E712",    # comparison to True/False
    "PLR0913", # too many arguments
    "PLR2004", # magic value comparison
    "TRY003",  # avoid specifying long messages outside exception class
    "TRY400",  # use logging.exception instead of logging.error
    "EM101",   # exception must not use string literal
    "EM102",   # exception must not use f-string literal
    "N802",    # function name should be lowercase (conflicts with some LangChain patterns)
    "N803",    # argument name should be lowercase
    "N806",    # variable in function should be lowercase
    "ARG001",  # unused function argument (common in callbacks)
    "ARG002",  # unused method argument
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "C901",    # too complex
]

# Allow autofix for all enabled rules
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Ignore specific rules in test files
"test_*.py" = ["PLR2004", "S101", "TID252", "T201", "F401", "PLC0415", "TRY300"]
"**/tests/**" = ["PLR2004", "S101", "TID252", "T201", "F401", "PLC0415", "TRY300"]  # Allow print, unused imports, non-top-level imports in tests
# Ignore import errors in __init__.py files and re-export modules
"__init__.py" = ["F401", "F403"]
"**/agent_utils.py" = ["F401"]  # Re-exports utilities for agents
"**/alpha_vantage.py" = ["F401"]  # Re-exports from specialized alpha vantage modules
# Config files can have lots of settings
"**/config.py" = ["PLR0913"]
"**/default_config.py" = ["PLR0913"]

[tool.ruff.lint.isort]
# Import sorting configuration
known-first-party = ["litadel", "cli", "api"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.lint.pydocstyle]
# Docstring convention
convention = "google"

[tool.ruff.format]
# Formatting options (similar to Black)
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
